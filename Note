SQLAlchemy是Python编程语言下的一款ORM框架，该框架建立在数据库API之上，使用关系对象映射进行数据库操作，
简言之便是：将对象转换成SQL，然后使用数据API执行SQL并获取执行结果。

1.ORM方法论基于三个核心原则：

简单：以最基本的形式建模数据。

传达性：数据库结构被任何人都能理解的语言文档化。

精确性：基于数据模型创建正确标准化了的结构。

ORM 框架的作用:将数据库表中的一行记录与一个对象互相作自动转换。

2.Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作，如：
'数据库类型+数据库驱动名称://用户名:口令@机器地址:端口号/数据库名'

MySQL-Python
    mysql+mysqldb://<user>:<password>@<host>[:<port>]/<dbname>
pymysql
    mysql+pymysql://<username>:<password>@<host>/<dbname>[?<options>]
MySQL-Connector
    mysql+mysqlconnector://<user>:<password>@<host>[:<port>]/<dbname>
    
注：SQLAlchemy无法修改表结构，如果需要可以使用SQLAlchemy开发者开源的另外一个软件Alembic来完成。


3.UUID:
uuid1 生成基于计算机主机ID和当前时间的UUID

31a936a1-2339-11e6-8542-9cb70ded607f

uuid3 基于命名空间和一个字符的MD5加密的UUID

6fa459ea-ee8a-3ca4-894e-db77e160355e

uuid4 随机生成一个UUID

67e6497c-8aec-4413-9955-da86f38ff2d6

uuid5 基于命名空间和一个字符的SHA-1加密的UUID

根据十六进制字符生成UUID

转换成十六进制的UUID表现字符

00010203-0405-0607-0809-0a0b0c0d0e0f

4.Password 加密方式：
hashlib模块 -主要提供字符加密功能，将md5和sha模块整合到了一起，支持md5,sha1, sha224, sha256, sha384, sha512等算法。
MD5 加密算法 128位长度----32位字符串
有很高的安全性。它对应任何字符串都可以加密成一段唯一的固定长度的代码。
 m = hashlib.md5(data)
 m = m.update('ABC')
 m.hexgigest()
 
SHA1 加密算法 SHA1基于MD5，加密后的数据长度更长，
它对长度小于264的输入，产生长度为160bit的散列值。比MD5多32位。(慢/严)
hashlib.sha1('This is a sha1 test!').hexdigest()

SHA256 通用密码加密 64位 ---- from passlib.hash import sha256_crypt

sha256 = hashlib.sha256()
sha256.update(string.encode('utf-8'))
res = sha256.hexdigest()

其它 类似：
sha384 = hashlib.sha384()
sha384.update(string.encode('utf-8'))
res = sha384.hexdigest()
print("sha384加密结果:",res)

sha512= hashlib.sha512()
sha512.update(string.encode('utf-8'))
res = sha512.hexdigest()
print("sha512加密结果:",res)

md5加密结果: 0e725e477851ff4076f774dc312d4748
sha1加密结果: 458d32be8ea38b66300174970ab0a8c0b734252f
sha256加密结果: 1e62b55bfd02977943f885f6a0998af7cc9cfb95c8ac4a9f30ecccb7c05ec9f4
sha384加密结果: e91cdf0d2570de5c96ee84e8a12cddf16508685e7a03b3e811099cfcd54b7f52183e20197cff7c07f312157f0ba4875b
sha512加密结果: 3f0020a726e9c1cb5d22290c967f3dd1bcecb409a51a8088db520750c876aaec3f17a70d7981cd575ed4b89471f743f3f24a146a39d59f215ae3e208d0170073

hashlib 加密啊的字符串类型为二进制编码，直接加密字符串 会报错！
可以将字符串使用encode进行转换、或者使用byte转换为二进制，然后加盐值加密，更安全。

5. filter_by与 filter的区别：
1）filter 可以像写 sql 的 where 条件那样写 > < 等条件，但引用列名时，需要通过 类名.属性名 的方式。
filter_by 可以使用 python 的正常参数传递方法传递条件，指定列名时，不需要额外指定类名。
参数名对应名类中的属性名，但似乎不能使用 > < 等条件。

2）filter指定列名的时候，可以不使用类名；filter_by也不是说任何时候都可以不指定类名
平时使用的时候，两者语法区别在于当使用filter的时候条件之间是使用“=="，fitler_by使用的是"="。
user1 = session.query(User).filter_by(id=1).first()
user1 = session.query(User).filter(id==1).first()

3）最重要的区别是filter不支持组合查询，只能连续调用filter来变相实现。
而filter_by的参数是**kwargs，直接支持组合查询。

q = sess.query(IS).filter(IS.node == node and IS.password == password).all()
对应sql 语句：SELECT tb_is.id AS tb_is_id, tb_is.node AS tb_is_node, tb_is.password AS tb_is_password,
tb_is.email AS tb_is_email, tb_is.`admin` AS tb_is_admin, tb_is.contact AS tb_is_contact,
tb_is.is_available AS tb_is_is_available, tb_is.is_url AS tb_is_is_url, tb_is.note AS tb_is_note 
FROM tb_is WHERE tb_is.node = %(node_1)s
and后面的条件既不报错，又不生效，很坑。

要实现组合查询，要么连续调用filter：
q = sess.query(IS).filter(IS.node == node).filter(IS.password == password).all()

或者直接用filter_by：
q = sess.query(IS).filter_by(node=node, password=password).all()

6.classmethod 和 staticmethod 的用法

Python2.2以后可以使用@classmethod装饰器来创建类方法；
@staticmethod
经常有一些跟类有关系的功能但在运行时又不需要实例和类参与的情况下需要用到静态方法.
比如更改环境变量或者修改其他类的属性等能用到静态方法. 这种情况可以直接用函数解决,
但这样同样会扩散类内部的代码，造成维护困难.

class Kls(object):
    def __init__(self, data):
        self.data = data
    def printd(self):
        print(self.data)
    @staticmethod
    def smethod(*arg):
        print('Static:', arg)
    @classmethod
    def cmethod(*arg):
        print('Class:', arg)

作者：李保银 链接：https://www.zhihu.com/question/20021164/answer/18224953

静态方法和在普通的非class的method作用是一样的，只不过是命名空间是在类里面。
一般使用场景就是和类相关的操作，但是又不会依赖和改变类、实例的状态。

类和实例都是对象.所以它们可以有方法.

类的方法就叫类方法.
实例的方法就叫实例方法.
至于静态方法就是写在类里的方法,必须用类来调用(极少数情况下使用,一般都在全局里直接写函数了)

7.Oauth2.0 与 token验证
My server does not request token and access token. He use just the key and secret.
How do I implement oAuth connection to this server in python?

[code]
from requests_oauthlib import OAuth1Session
test = OAuth1Session('consumer_key',
                    client_secret='XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
url = 'https://one-legged-ouath.example.com/username/test'
r = test.get(url)
print r.content
[code/]

I know this is an old question, but the accepted answer really doesn't address his question, since as the OP notes, none of the examples pertain to just using the key and secret, sans token.

It sounds as if you're using what I understand is referred to as OAuth 1.0a (One Leg), although some refer to it as OAuth 1.0a Two-legged.

I found a decent write up on it here:

http://oauthbible.com/

I haven't tested this but there appears to be a pretty good example here:

https://github.com/CarmaSys/CarmaLinkAPI/wiki/Authentication-&-Permissions

There is another good example here:

https://stackoverflow.com/a/12710408/2599534


OAuth 认证

谈到RESTful认证，通常会提到OAuth协议。

So what is OAuth?

通常是允许一个应用接入到另外一个应用的数据或者服务的验证方法。

举个例子，如果一个网站或者应用问你权限接入你的facebook账号，并且提交一些东西到你的时间轴上面。这个例子，
你就是资源拥有者（你拥有你的facebook时间轴），第三方应用是消费者，facebook是提供者。

如果你授权接入允许消费者写东西到你的时间轴上面，是不需要提供你的facebook登录信息的。

OAuth并不合适用在client/server的RESTful API上面，一般是用在你的RESTful API允许第三方应用（消费者）去接入。

上面的例子是，客户端/服务器端之间直接通讯并不需要去隐藏认证信息，客户端是直接发送认证请求信息到服务器端的。